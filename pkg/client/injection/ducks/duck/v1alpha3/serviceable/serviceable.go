/*
Copyright 2020 VMware, Inc.
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by injection-gen. DO NOT EDIT.

package serviceable

import (
	context "context"

	v1alpha3 "github.com/vmware-labs/service-bindings/pkg/apis/duck/v1alpha3"
	duck "knative.dev/pkg/apis/duck"
	controller "knative.dev/pkg/controller"
	injection "knative.dev/pkg/injection"
	dynamicclient "knative.dev/pkg/injection/clients/dynamicclient"
	logging "knative.dev/pkg/logging"
)

func init() {
	injection.Default.RegisterDuck(WithDuck)
}

// Key is used for associating the Informer inside the context.Context.
type Key struct{}

func WithDuck(ctx context.Context) context.Context {
	dc := dynamicclient.Get(ctx)
	dif := &duck.CachedInformerFactory{
		Delegate: &duck.TypedInformerFactory{
			Client:       dc,
			Type:         (&v1alpha3.Serviceable{}).GetFullType(),
			ResyncPeriod: controller.GetResyncPeriod(ctx),
			StopChannel:  ctx.Done(),
		},
	}
	return context.WithValue(ctx, Key{}, dif)
}

// Get extracts the typed informer from the context.
func Get(ctx context.Context) duck.InformerFactory {
	untyped := ctx.Value(Key{})
	if untyped == nil {
		logging.FromContext(ctx).Panic(
			"Unable to fetch knative.dev/pkg/apis/duck.InformerFactory from context.")
	}
	return untyped.(duck.InformerFactory)
}
