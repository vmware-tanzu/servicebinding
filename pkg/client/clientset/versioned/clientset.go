/*
Copyright 2020 VMware, Inc.
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	duckv1alpha2 "github.com/vmware-labs/service-bindings/pkg/client/clientset/versioned/typed/duck/v1alpha2"
	bindingsv1alpha1 "github.com/vmware-labs/service-bindings/pkg/client/clientset/versioned/typed/labs/v1alpha1"
	internalv1alpha1 "github.com/vmware-labs/service-bindings/pkg/client/clientset/versioned/typed/labsinternal/v1alpha1"
	servicebindingv1alpha3 "github.com/vmware-labs/service-bindings/pkg/client/clientset/versioned/typed/servicebinding/v1alpha3"
	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	DuckV1alpha2() duckv1alpha2.DuckV1alpha2Interface
	BindingsV1alpha1() bindingsv1alpha1.BindingsV1alpha1Interface
	InternalV1alpha1() internalv1alpha1.InternalV1alpha1Interface
	ServicebindingV1alpha3() servicebindingv1alpha3.ServicebindingV1alpha3Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	duckV1alpha2           *duckv1alpha2.DuckV1alpha2Client
	bindingsV1alpha1       *bindingsv1alpha1.BindingsV1alpha1Client
	internalV1alpha1       *internalv1alpha1.InternalV1alpha1Client
	servicebindingV1alpha3 *servicebindingv1alpha3.ServicebindingV1alpha3Client
}

// DuckV1alpha2 retrieves the DuckV1alpha2Client
func (c *Clientset) DuckV1alpha2() duckv1alpha2.DuckV1alpha2Interface {
	return c.duckV1alpha2
}

// BindingsV1alpha1 retrieves the BindingsV1alpha1Client
func (c *Clientset) BindingsV1alpha1() bindingsv1alpha1.BindingsV1alpha1Interface {
	return c.bindingsV1alpha1
}

// InternalV1alpha1 retrieves the InternalV1alpha1Client
func (c *Clientset) InternalV1alpha1() internalv1alpha1.InternalV1alpha1Interface {
	return c.internalV1alpha1
}

// ServicebindingV1alpha3 retrieves the ServicebindingV1alpha3Client
func (c *Clientset) ServicebindingV1alpha3() servicebindingv1alpha3.ServicebindingV1alpha3Interface {
	return c.servicebindingV1alpha3
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.duckV1alpha2, err = duckv1alpha2.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.bindingsV1alpha1, err = bindingsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.internalV1alpha1, err = internalv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.servicebindingV1alpha3, err = servicebindingv1alpha3.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.duckV1alpha2 = duckv1alpha2.NewForConfigOrDie(c)
	cs.bindingsV1alpha1 = bindingsv1alpha1.NewForConfigOrDie(c)
	cs.internalV1alpha1 = internalv1alpha1.NewForConfigOrDie(c)
	cs.servicebindingV1alpha3 = servicebindingv1alpha3.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.duckV1alpha2 = duckv1alpha2.New(c)
	cs.bindingsV1alpha1 = bindingsv1alpha1.New(c)
	cs.internalV1alpha1 = internalv1alpha1.New(c)
	cs.servicebindingV1alpha3 = servicebindingv1alpha3.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
