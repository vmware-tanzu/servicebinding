name: CI

on:
  push:
    branches:
    - '**'
    - '!dependabot/**'
    tags:
    - '**'
  pull_request: {}

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.1
    - uses: actions/setup-go@v2.1.1
      with:
        go-version: 1.14.x
    - name: Test
      run: go test ./... -coverprofile cover.out
    - name: Report coverage
      run: bash <(curl -s https://codecov.io/bash)
      env:
        CODECOV_TOKEN: a99a7ac2-ad9e-4c7a-b33a-17732e3469f4

  stage:
    needs: test
    if: github.event_name == 'push' && startsWith(github.repository, 'vmware-labs/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.1
    - uses: actions/setup-go@v2.1.1
      with:
        go-version: 1.14.x
    - name: Install ko
      run: |
        go get github.com/google/ko/cmd/ko
        echo "##[add-path]$(go env GOPATH)/bin"
      env:
        GO111MODULE: "off"
    - name: dockerhub auth
      run: |
        echo "$DOCKERHUB_PASSWORD" | docker login --username $DOCKERHUB_USERNAME --password-stdin
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Stage
      run: |
        set -o errexit
        set -o nounset
        set -o pipefail

        readonly version=$(cat VERSION)
        readonly git_sha=$(git rev-parse HEAD)
        readonly git_timestamp=$(TZ=UTC git show --quiet --date='format-local:%Y%m%d%H%M%S' --format="%cd")
        readonly slug=${version}-${git_timestamp}-${git_sha:0:16}

        ko resolve -t ${slug} --strict -B -f config | sed -e "s|bindings.labs.vmware.com/release: devel|bindings.labs.vmware.com/release: ${slug}|" > service-bindings.yaml
      env:
        KO_DOCKER_REPO: docker.io/vmware
    - name: Upload stage asset
      uses: actions/upload-artifact@v2.1.2
      with:
        name: service-bindings.yaml
        path: service-bindings.yaml

  acceptance:
    needs: stage
    if: github.event_name == 'push' && startsWith(github.repository, 'vmware-labs/')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s:
        - 1.16.9
        - 1.17.5
        - 1.18.6
      fail-fast: false
    steps:
    - uses: actions/checkout@v2.3.1
    - name: Download staged asset
      uses: actions/download-artifact@v2.0.3
      with:
        name: service-bindings.yaml
    - name: Install kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.8.1/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin
    - name: Install kapp
      run: |
        curl -Lo ./kapp https://github.com/k14s/kapp/releases/download/v0.31.0/kapp-linux-amd64
        chmod +x ./kapp
        sudo mv ./kapp /usr/local/bin
    - name: Create cluster
      run: kind create cluster --wait 5m --image kindest/node:v${{ matrix.k8s }}
    - name: Install Service Bindings
      run: kapp deploy -a service-bindings -f service-bindings.yaml -y
    - name: Deploy Spring Petclinic
      run: kapp deploy -a spring-petclinic -f samples/spring-petclinic -y
    - name: Collect Spring Petclinic diagnostics
      run: |
        echo "##[group]Petclinic deployment"
          kubectl get deployment spring-petclinic -oyaml
        echo "##[endgroup]"
        echo "##[group]Petclinic logs"
          kubectl logs -l app=spring-petclinic -c application --tail 1000
        echo "##[endgroup]"
        echo "##[group]MySQL deployment"
          kubectl get deployment spring-petclinic-db -oyaml
        echo "##[endgroup]"
        echo "##[group]MySQL logs"
          kubectl logs -l app=spring-petclinic-db -c mysql --tail 1000
        echo "##[endgroup]"
      if: always()
    - name: Cleanup Service Bindings
      run: kapp delete -a service-bindings -y
      if: always()
    - name: Cleanup cluster
      run: kind delete cluster
      if: always()

  release:
    needs: acceptance
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.3.1
    - name: Get release version
      id: get-version
      run: |
        echo ::set-output name=version::$(cat VERSION)
    - name: Draft release
      id: create_release
      uses: actions/create-release@v1.1.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
    - name: Download staged asset
      uses: actions/download-artifact@v2.0.3
      with:
        name: service-bindings.yaml
    - name: Upload release asset
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: service-bindings.yaml
        asset_name: service-bindings-${{ steps.get-version.outputs.version }}.yaml
        asset_content_type: application/x-yaml
